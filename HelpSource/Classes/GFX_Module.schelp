class:: GFX_Module
summary:: class for effects
categories:: Green>GFX
related:: Classes/GFX_ModuleGUI, Classes/GFX_Rack, Classes/GFX_RackGUI


DESCRIPTION::

NOTE::
It is recommended to instantiate the effect subclasses directly. See LINK::#Basics:: below.
CODE::
GFX_Module.allSubclasses;
::
::


CLASSMETHODS::

METHOD:: new

METHOD:: newModule
Convenience method for calling CODE::.new:: on some some subclass (efx).

METHOD:: ar
subclassResponsibility

METHOD:: specs
subclassResponsibility

METHOD:: allSubclasses
A sorted LINK::Classes/Array:: of all subclasses.

METHOD:: crossFade
A mapping LINK::Classes/Function:: used for all dry-wet cross fades. The default is linear. Set this before creating modules.

CODE::
GFX_Module.crossFade= {|x| sin(x*0.5pi)};  //equal-power
GFX_Module.crossFade= {|x| x};  //linear (default)
::


INSTANCEMETHODS::

PRIVATE:: initGFX_Module, prBuildDef

METHOD:: order
An LINK::Classes/Array:: with parameter names as symbols. Mainly used internally for generating the GUI. The order is taken from the *ar arguments.

METHOD:: prefix
A lowercase LINK::Classes/String:: derived from the effect's class name (with CODE::GFX_:: removed). Mainly used internally for parameter names.


SUBSECTION:: Synth

METHOD:: lags


SUBSECTION:: Convenience methods

METHOD:: openCodeFile
Show the class definition.
CODE::
g= GFXPch2();
g.openCodeFile;
::


SUBSECTION:: Generated methods

DEFINITIONLIST::
## .pause || LINK::Classes/Boolean::. Get or set the running state (see LINK::Classes/Node#-run::). Can be used for saving CPU. Modules are then automatically unpaused as soon as the mix parameter is > 0.0. It is also possible to double-click the horizontal label in the GUI to pause and unpause a module.
CODE::
g= GFXPch2();
g.pause= true;
::
NOTE:: might click with reverb and delay effect modules.::
## ...Mix || LINK::Classes/Float::. Get or set the dry/wet mix 0.0 - 1.0. Exact method name will depend on class name.
CODE::
g= GFXPch2();
g.pch2Mix= 0.5;
::
## ...Name || Get or set effect parameters. Exact method names are defined in the CODE::*specs:: class method.
CODE::
g= GFXPch2();
g.pch2Ratio= 2.4;
::
::


EXAMPLES::

SUBSECTION:: Basics

CODE::
s.boot;
a= {SinOsc.ar([400, 404], 0, 0.1)}.play;  //test sound

g= GFXPch2();
g.pch2Mix= 0.5;
g.pch2Ratio= 1.1;

//optional GUI
b= g.gui;

b.close; g.free; a.free;

//directly as pseudo UGen
a= {GFXPch2.ar(SinOsc.ar([400, 404], 0, 0.1))}.play;
a.free;
::

SUBSECTION:: Writing custom modules

It is fairly easy to add your own custom effect modules. Just follow the following guidelines...

LIST::
## Write a class that is a subclass of LINK::Classes/GFX_Module::.
## Add two class methods called CODE::*ar:: and CODE::*specs::.
## For CODE::*ar:: the first argument must be called CODE::in::. This argument will be the incoming audio and should deal with any number of channels.
## Additional CODE::*ar:: arguments should not use the reserved names CODE::mix::, CODE::pause::, CODE::lags:: and CODE::bus::.
## CODE::*ar:: argument order will determine parameter sorting in the GUI.
## The CODE::*specs:: class method should return an LINK::Classes/Event:: with parameter names as keys and specs as values. There is a little bit of EMPHASIS::magic:: here as the key names should follow the naming convention prefixParameter.
::

Simple module example class...

CODE::
GFXFreq : GFX_Module {

	*ar {|in, shift= -50|
		^FreqShift.ar(in, shift)
	}

	*specs {
		^(
			freqShift: ControlSpec(-1000, 1000)
		)
	}
}
::

See the classes in the folder Modules for more examples.

A properly written class can be used like any other module - including being added to a LINK::Classes/GFX_Rack::, as a LINK::Classes/SynthDef:: variant (with optional GUI) or as a pseudo LINK::Classes/UGen:: variant...

CODE::
GFXFreq().gui;  //SynthDef variant with GUI

{GFXFreq.ar(SinOsc.ar)}.play;  //pseudo UGen variant
::

A special feature is that when used in a rack, a module will be sent the parameter 'CODE::feedback::'. This is the index of an internal audio bus that is tapped from the rack output pre volume fader. See the GFXFeed module for an example.
