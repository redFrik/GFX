TITLE:: GFX_Overview
SUMMARY:: GFX system overview
CATEGORIES:: Green
RELATED:: Classes/GFX_Module, Classes/GFX_Rack, Classes/CV, Overviews/GUICVOverview

DESCRIPTION::

Green effects module system with optional GUI. Modules automatically adapt to any number of channels.

Based on the older redModule in the redSys quark ( https://github.com/redFrik/redSys )

Provides SynthDef+Synth construction, pseudo UGen support, code<->GUI linkage and automatic GUI generation with minimal code (see Modules folder - basically just an CODE::*ar:: method and some specs - more details: LINK::Classes/GFX_Module#Writing custom modules::).


SUBSECTION:: Basics

Start a GFX pitch shifter module on the default server...
CODE::
s.boot;
g= GFXPch2();

//and also play some test sound to hear the effect
a= {SinOsc.ar([400, 404], 0, 0.2)}.play;
::

A parameter can be changed in several ways:
CODE::
g.cvs[\pch2Mix].value= 0.4

g.set(\pch2Mix, 0.6)

g.pch2Mix= 0.8
::

And this for modules as well as for a rack. So if CODE::g:: instead is a LINK::Classes/GFX_Rack:: instance, the commands above will lookup the pch2 module and set its mix value. (If there are several modules of the same type in the rack postfixes will be used.)

Often it's easiest to access and changes parameters using the generated methods method (the 3rd example above). See LINK::Classes/GFX_Module#Generated methods::.

Available parameters and current values can be listed like this...

CODE::
g.values;
::

and parameters can be set like this...

CODE::
g.pch2Ratio= 2.0.rrand(3);
::

GUI is optional...
CODE::
g.gui;
::

and any changes in the GUI is reflected in code and vice versa.

CODE::
g.pch2Ratio= 1.5;
g.pch2Mix= 0;
::

For the effects rack, normally one would select a few modules and put them in a rack...
CODE::
r= GFX_Rack([GFXFreq, g, GFXTanh, GFXTank]);
r.values;
r.pch2Mix= 0.5;
r.gui;
::


SUBSECTION:: Class hierarchy

STRONG::Available GFX classes:::

CLASSTREE:: AbstractGFX


STRONG:: Supporting GUI classes:::

CLASSTREE:: AbstractGFXGUI


SUBSECTION:: Optional GUI

There are two versions. The standard one with knobs (v0) and a more compact one (v1) with silders and numberboxes.

IMAGE::../Images/GFX_RackGUI_v0.png::
IMAGE::../Images/GFX_RackGUI_v1.png::
IMAGE::../Images/GFXPch2GUI_v0.png::
IMAGE::../Images/GFXPch2GUI_v1.png::
IMAGE::../Images/GFXTankGUI_v0.png::
IMAGE::../Images/GFXTankGUI_v1.png::

The LINK::Classes/AbstractGFX#-gui::. method has an argument for which version to use.

EXAMPLES::

SUBSECTION:: module

CODE::
s.boot;

g= GFXPch2();
a= {SinOsc.ar([400, 404], 0, 0.1)}.play;
g.pch2Mix= 0.5;
g.pch2Ratio= 1.1;
g.pch2Ratio;

g.values;
g.cvs;
g.numChannels;

//--optional GUI
g.gui;
g.gui(version:1);

g.restoreDefaults;
g.free;
a.free;
::

SUBSECTION:: as UGen

CODE::
s.meter;
a= {GFXPch2.ar(SinOsc.ar([400, 404], 0, 0.1), MouseX.kr(-4, 4))}.play;
a.free;

//modules automatically adapt to any number of channels
a= {GFXPch2.ar(SinOsc.ar(400, 0, 0.1), MouseX.kr(-4, 4))}.play;
a.free;
::

SUBSECTION:: rack

CODE::
a= {SinOsc.ar([400, 404], 0, 0.1)}.play;
r= GFX_Rack([GFXFreq, GFXTanh, GFXPch2, GFXTank]);
r.pch2Mix= 0.5;
r.tanhMix= 0.25;
r.freqMix= 1;
r.freqShift= 10;

//--optional gui
r.gui;
r.gui(version:1);
r.free;


//a rack with all available effect modules
Server.default.options.memSize= 2**19;
s.reboot;
GFX_Rack(GFX_Module.allSubclasses).gui;  //scroll down to see all
a.free;
::
